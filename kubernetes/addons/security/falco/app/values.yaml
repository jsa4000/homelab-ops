# Attach the Falco process to a tty inside the container. Needed to flush Falco logs as soon as they are emitted.
tty: false

# We set the controller to daemonset since we have the syscalls source enabled.
# It will ensure that every node on our cluster will be monitored by Falco.
# Please note that the api-server will use the "k8saudit-webhook" service to send
# audit logs to the falco instances. That means that when we have multiple instances of Falco
# we can not predict to which instance the audit logs will be sent. When testing please check all
# the Falco instance to make sure that at least one of them have received the audit logs.
controller:
  # Available options: deployment, daemonset.
  kind: daemonset

# Choose between the kernel module or the ebpf probe.
driver:
  enabled: true
  # Available options: kmod (kernel driver), ebpf (eBPF probe), modern_ebpf (modern eBPF probe)
  kind: modern_ebpf
  modernEbpf:
    leastPrivileged: false
    bufSizePreset: 4
    cpusForEachBuffer: 1

# Enable the collectors used to enrich the events with metadata.
collectors:
  enabled: true
  # https://falco.org/docs/install-operate/third-party/production/#k3s
  containerd:
    enabled: true
    socket: /run/k3s/containerd/containerd.sock
  docker:
    enabled: false
  crio:
    enabled: false

# Third party rules enabled for Falco.
customRules: {}

falcoctl:
  artifact:
    install:
      # -- Enable the init container.
      enabled: true
    follow:
      # -- Enable the sidecar container.
      enabled: true
  config:
    artifact:
      install:
        # -- List of artifacts to be installed by the falcoctl init container.
        refs: [falco-rules:3, k8saudit-rules:0.7]
      follow:
        # -- List of artifacts to be followed by the falcoctl sidecar container.
        refs: [falco-rules:3, k8saudit-rules:0.7]

services:
  - name: k8saudit-webhook
    type: NodePort
    ports:
      - port: 9765 # See plugin open_params
        nodePort: 30007
        protocol: TCP

metrics:
  enabled: true
  interval: 1h

serviceMonitor:
  create: true
  interval: 60s
  labels:
    release: prometheus-stack

resources:
  requests:
    cpu: 100m
    memory: 64Mi
  limits:
    cpu: 1000m
    memory: 1024Mi

falco:
  rules_file:
    # Falco predefined rules
    - /etc/falco/falco_rules.yaml
    - /etc/falco/k8s_audit_rules.yaml
    #Â Directory for custom rules
    - /etc/falco/rules.d
  # rules:
  #   - disable:
  #       rule: "*"
  #   - enable:
  #       rule: Netcat Remote Code Execution in Container
  #   - enable:
  #       rule: Delete or rename shell history
  # The maximum number of items allowed in the queue is determined by this value.
  # Setting the value to 0 (which is the default) is equivalent to keeping the queue unbounded.
  outputs_queue:
    capacity: 0
  plugins:
    # Audit events are logged by the API server when almost every cluster management task is performed.
    # By monitoring the audit logs, this plugins provides high visibility over the activity in your cluster
    # allows detecting malicious behavior.
    - name: k8saudit
      library_path: libk8saudit.so
      init_config:
        maxEventBytes: 1048576
      open_params: "http://:9765/k8s-audit"
    #  It is used to extract information from json payloads like k8s_audit events or from event payloads
    # generated by source plugins like cloudtrail, which happen to represent their event payload as json.
    - name: json
      library_path: libjson.so
      init_config: ""
  load_plugins: [k8saudit, json]
  # With the default settings, the throttling mechanism is disabled.
  outputs:
    rate: 0
    max_burst: 1000
  # enable standard output
  stdout_output:
    enabled: true
  syslog_output:
    enabled: false
  file_output:
    enabled: false
  #http_output:
  #  enabled: false
  metrics:
    enabled: true

# https://github.com/falcosecurity/charts/blob/master/falcosidekick/values.yaml
falcosidekick:
  enabled: true
  replicaCount: 1
  serviceMonitor:
    enabled: true
    interval: 30s
    additionalLabels:
      release: prometheus-stack
  prometheusRules:
    enabled: true
  webui:
    enabled: true
    replicaCount: 1
    # Log level ("debug", "info", "warning", "error")
    loglevel: "warning"
    # TTL for keys, the syntax in X<unit>, with <unit>: s, m, d, w (0 for no ttl)
    ttl: 60m
    disableauth: true
    service:
      port: 80
    # Bitnami Docker Redis Image does not include RediSearch module (RediSearch > v2)
    externalRedis:
      enabled: false
      url: redis.database.svc.cluster.local
      port: 6379
    redis:
      enabled: true
      storageEnabled: false
    ingress:
      enabled: false
