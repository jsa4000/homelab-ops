controllers:
  main:
    annotations:
      # Force to reload because configmap or secret changed. Use kustomization to generate maps with suffix instead.
      reloader.stakater.com/auto: "true"
    replicas: 1
    strategy: RollingUpdate
    type: statefulset
    initContainers:
      # This container will create the main database and user
      init-db:
        image:
          repository: ghcr.io/onedr0p/postgres-init
          tag: 16.6
        envFrom:
          - secretRef:
              name: home-assistant-secret
    containers:
      main:
        image:
          repository: ghcr.io/onedr0p/home-assistant
          # TODO: onedr0p images are not immutable, so it needed to add the @shaXYZ after the tag version to ensure using the same image.
          # https://github.com/onedr0p/containers?tab=readme-ov-file#tag-immutability
          tag: 2025.2.5
        envFrom:
          - secretRef:
              name: home-assistant-secret
        env:
          TZ: Europe/Madrid
          # Trusted Networks cidr (Flannel and Cilium)
          HASS_HTTP_TRUSTED_PROXY_1: 10.42.0.0/16
          HASS_HTTP_TRUSTED_PROXY_2: 10.52.0.0/16
          HOME_ASSISTANT__HACS_INSTALL: "true"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
        resources:
          requests:
            cpu: 15m
      code-server:
        image:
          repository: ghcr.io/coder/code-server
          tag: 4.96.4
        args:
          - --auth
          - none
          - --user-data-dir
          - "/config/.vscode"
          - --extensions-dir
          - "/config/.vscode"
          - --port
          - "8080"
          - "/config"
        env:
          TZ: Europe/Madrid

defaultPodOptions:
  automountServiceAccountToken: false
  securityContext:
    runAsNonRoot: true
    runAsUser: 568
    runAsGroup: 568
    fsGroup: 568
    fsGroupChangePolicy: OnRootMismatch
    seccompProfile: { type: RuntimeDefault }
  # Deploy the workload into a node with IoT capabilities and devices attached to (preferably).
  # Commonly 'Node Feature Discovery' service will label nodes with the specific device attached to (see zigbee2mqtt)
  # affinity:
  #   nodeAffinity:
  #     preferredDuringSchedulingIgnoredDuringExecution:
  #       - weight: 100
  #         preference:
  #           matchExpressions:
  #             - key: "sonoff.feature.node.kubernetes.io/zigbee"
  #               operator: "In"
  #               values: ["true"]

service:
  main:
    controller: main
    ports:
      http:
        port: 8123
      code-server:
        port: 8080

persistence:
  config:
    type: persistentVolumeClaim
    accessMode: ReadWriteOnce
    storageClass: longhorn
    size: 1Gi
    globalMounts:
      - path: /config
  logs:
    type: emptyDir
    globalMounts:
      - path: /config/logs
  tts:
    type: emptyDir
    globalMounts:
      - path: /config/tts
  tmp:
    type: emptyDir
